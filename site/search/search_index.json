{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"home/","text":"Welcome to my basic tutorial series! I'm Kevin and I am a UCLA Student. This website is a quick , informal intro to some tools used in web development such as Dash and Flask. Contents Dash Numpy and Pandas basics Plotly scatterplots Flask Introduction First webpage in Flask Dynamic routing in Flask","title":"Home"},{"location":"home/#welcome-to-my-basic-tutorial-series","text":"I'm Kevin and I am a UCLA Student. This website is a quick , informal intro to some tools used in web development such as Dash and Flask.","title":"Welcome to my basic tutorial series!"},{"location":"home/#contents","text":"Dash Numpy and Pandas basics Plotly scatterplots Flask Introduction First webpage in Flask Dynamic routing in Flask","title":"Contents"},{"location":"dash/numpy-basics/","text":"First install pandas and numpy pip install numpy Import pandas and nump import numpy as np Arrays in Numpy Convert list to array mylist = [1,2,3,4] arr = np.array(mylist) Shaping 1D to 2D array arr.reshape(2,2) Two rows, two columns","title":"Numpy Basics"},{"location":"dash/numpy-basics/#first-install-pandas-and-numpy","text":"pip install numpy","title":"First install pandas and numpy"},{"location":"dash/numpy-basics/#import-pandas-and-nump","text":"import numpy as np","title":"Import pandas and nump"},{"location":"dash/numpy-basics/#arrays-in-numpy","text":"Convert list to array mylist = [1,2,3,4] arr = np.array(mylist)","title":"Arrays in Numpy"},{"location":"dash/numpy-basics/#shaping-1d-to-2d-array","text":"arr.reshape(2,2) Two rows, two columns","title":"Shaping 1D to 2D array"},{"location":"dash/pandas-basics/","text":"Install pandas pip install pandas Import pandas import pandas as pd Read csv as data.frame df = pd.read_csv(\"salaries.csv\") Converting Numpy array to data.frame Matrix of 5 rows and 10 columns mat = np.arange(0,50).reshape(5,10) Converting to pandas data.frame df = pd.DataFrame(data = mat) Finding column names df.columns Renaming columns df.columns = [\"f1\",\"f2\",\"f3\",\"f4\",\"label\"]","title":"Pandas Basics"},{"location":"dash/pandas-basics/#install-pandas","text":"pip install pandas","title":"Install pandas"},{"location":"dash/pandas-basics/#import-pandas","text":"import pandas as pd","title":"Import pandas"},{"location":"dash/pandas-basics/#read-csv-as-dataframe","text":"df = pd.read_csv(\"salaries.csv\")","title":"Read csv as data.frame"},{"location":"dash/pandas-basics/#converting-numpy-array-to-dataframe","text":"Matrix of 5 rows and 10 columns mat = np.arange(0,50).reshape(5,10) Converting to pandas data.frame df = pd.DataFrame(data = mat)","title":"Converting Numpy array to data.frame"},{"location":"dash/pandas-basics/#finding-column-names","text":"df.columns","title":"Finding column names"},{"location":"dash/pandas-basics/#renaming-columns","text":"df.columns = [\"f1\",\"f2\",\"f3\",\"f4\",\"label\"]","title":"Renaming columns"},{"location":"dash/plotly-basics/","text":"Install plotly Basic plotly gives us idea of Dash syntax and documentation pip install plotly==4.2.1 Import plotly import plotly.offline as pyo import plotly.graph_objs as go Scatter plots Data must first be in a list Setup data data = [go.Scatter(x= <list of values for x-axis>, y =<list of values for y-axis>, mode = 'markers', marker = dict(size = <numeric size>, color = \"<insert color or rgb>\", symbol = \"<type of scatterplot symbol>\", line = dict(<dictionary specifying with of line>) ))] Define Layout layout = go.Layout(title = \"<insert plot title\", xaxis = dict(title = \"MY X AXIS\" , yaxis = dict(title = \"MY Y AXIS\"), hovermode = \"closest\") Save HTML file pyo.plot(data, filename = \"<insert name>.html\") Execute fig = go.Figure(data=data,layout=layout) pyo.plot(fig,filename=\"<filename>.html\")","title":"Plotly Basics"},{"location":"dash/plotly-basics/#install-plotly","text":"Basic plotly gives us idea of Dash syntax and documentation pip install plotly==4.2.1","title":"Install plotly"},{"location":"dash/plotly-basics/#import-plotly","text":"import plotly.offline as pyo import plotly.graph_objs as go","title":"Import plotly"},{"location":"dash/plotly-basics/#scatter-plots","text":"Data must first be in a list","title":"Scatter plots"},{"location":"dash/plotly-basics/#setup-data","text":"data = [go.Scatter(x= <list of values for x-axis>, y =<list of values for y-axis>, mode = 'markers', marker = dict(size = <numeric size>, color = \"<insert color or rgb>\", symbol = \"<type of scatterplot symbol>\", line = dict(<dictionary specifying with of line>) ))]","title":"Setup data"},{"location":"dash/plotly-basics/#define-layout","text":"layout = go.Layout(title = \"<insert plot title\", xaxis = dict(title = \"MY X AXIS\" , yaxis = dict(title = \"MY Y AXIS\"), hovermode = \"closest\")","title":"Define Layout"},{"location":"dash/plotly-basics/#save-html-file","text":"pyo.plot(data, filename = \"<insert name>.html\")","title":"Save HTML file"},{"location":"dash/plotly-basics/#execute","text":"fig = go.Figure(data=data,layout=layout) pyo.plot(fig,filename=\"<filename>.html\")","title":"Execute"},{"location":"flask/dynamic-routing/","text":"Dynamic Routing Route to different page depending on situation, such as in when different users log in to different accounts. However, steps to create and initialize Flask app remain the same. Create app.route @app.route('/some_page/<name>') def other_page(name): #essentially we're just returning user and formatting the name into the user return 'User: {}'.format(name) is an input, in this case for example the username. Flask will route to a different page depending on username input. Run server if __name__ == \"__main__\": app.run() Must add /some_page/ to the end of the URL, where name can be anything","title":"Dynamic Routing"},{"location":"flask/dynamic-routing/#dynamic-routing","text":"Route to different page depending on situation, such as in when different users log in to different accounts. However, steps to create and initialize Flask app remain the same.","title":"Dynamic Routing"},{"location":"flask/dynamic-routing/#create-approute","text":"@app.route('/some_page/<name>') def other_page(name): #essentially we're just returning user and formatting the name into the user return 'User: {}'.format(name) is an input, in this case for example the username. Flask will route to a different page depending on username input.","title":"Create app.route"},{"location":"flask/dynamic-routing/#run-server","text":"if __name__ == \"__main__\": app.run() Must add /some_page/ to the end of the URL, where name can be anything","title":"Run server"},{"location":"flask/first-website/","text":"Flask Beginner Tutorial Basic Flask concepts and routing tutorial Flask Basics How to create a very simple first webpage First install Flask pip install flask Import Flask from flask import flask Create instance of Flask app = Flask(__name__) Route to homepage @app.route('/') Define function to display content def index(): return '<h1>Hello Puppy!</h1>' Run server if __name__ == '__main__': app.run() You will get an output that says: Running on http://127.0.0.1:5000/ Click on link to see your first webpage","title":"Creating First Website"},{"location":"flask/first-website/#flask-beginner-tutorial","text":"Basic Flask concepts and routing tutorial","title":"Flask Beginner Tutorial"},{"location":"flask/first-website/#flask-basics","text":"How to create a very simple first webpage","title":"Flask Basics"},{"location":"flask/first-website/#first-install-flask","text":"pip install flask","title":"First install Flask"},{"location":"flask/first-website/#import-flask","text":"from flask import flask","title":"Import Flask"},{"location":"flask/first-website/#create-instance-of-flask","text":"app = Flask(__name__)","title":"Create instance of Flask"},{"location":"flask/first-website/#route-to-homepage","text":"@app.route('/')","title":"Route to homepage"},{"location":"flask/first-website/#define-function-to-display-content","text":"def index(): return '<h1>Hello Puppy!</h1>'","title":"Define function to display content"},{"location":"flask/first-website/#run-server","text":"if __name__ == '__main__': app.run() You will get an output that says: Running on http://127.0.0.1:5000/ Click on link to see your first webpage","title":"Run server"},{"location":"flask/flask-concepts/","text":"How Flask works When we open a browser we see a few things: Front-End - HTML displays the page elements like the actual text on the website - CSS styles the elemtns liek change font or sizeof the text - Bootstrap provides some automatic styling through CSS and Javascript Every website will perform some main ops: - Accept info from user - Retrieve info from databse - Create/Update/Delee info in the database - Display information back to the user To connect the front-end stuff to web database, we need a web framework. Web framework's job is to accept user information from website and connect to back-end database and report something relevant that can be stored in the db and communicate it to the front-end so user can see it. Flask is a web framework. Allows to connect Python code to the web. Flask does has reputation for being not scalable. Accepting user information Could be something like accepting query into Google search - instance of user filling out info. WTForms is a library that works well with flask Communicate with database and retrieve information. In this case its SQLite. SQLite can scale to quite a large website. SQLAlchemy allows us to write Python code instead of SQL queries Flask is like connector between front-end and back-end info that is stored Jinja templates grab info from Python and Flask ad send info back as HTML Flask renders HTML templates Virtual Environment Launched web app and want to use external python library, but the library gets updated. We can set up virtual environment to help manage dependencies.","title":"Intro to Flask"},{"location":"flask/flask-concepts/#how-flask-works","text":"When we open a browser we see a few things: Front-End - HTML displays the page elements like the actual text on the website - CSS styles the elemtns liek change font or sizeof the text - Bootstrap provides some automatic styling through CSS and Javascript Every website will perform some main ops: - Accept info from user - Retrieve info from databse - Create/Update/Delee info in the database - Display information back to the user To connect the front-end stuff to web database, we need a web framework. Web framework's job is to accept user information from website and connect to back-end database and report something relevant that can be stored in the db and communicate it to the front-end so user can see it. Flask is a web framework. Allows to connect Python code to the web. Flask does has reputation for being not scalable.","title":"How Flask works"},{"location":"flask/flask-concepts/#accepting-user-information","text":"Could be something like accepting query into Google search - instance of user filling out info. WTForms is a library that works well with flask Communicate with database and retrieve information. In this case its SQLite. SQLite can scale to quite a large website. SQLAlchemy allows us to write Python code instead of SQL queries Flask is like connector between front-end and back-end info that is stored Jinja templates grab info from Python and Flask ad send info back as HTML Flask renders HTML templates","title":"Accepting user information"},{"location":"flask/flask-concepts/#virtual-environment","text":"Launched web app and want to use external python library, but the library gets updated. We can set up virtual environment to help manage dependencies.","title":"Virtual Environment"}]}